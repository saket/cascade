{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cascade","text":"<p><code>cascade</code> builds nested popup menus with smooth height animations. It is designed to be a drop-in replacement for both PopupMenu and DropdownMenu, so using it in your project is beautifully only a word away. Try out the sample app to see it in action.</p> <pre><code>implementation \"me.saket.cascade:cascade:2.3.0\"\nimplementation \"me.saket.cascade:cascade-compose:2.3.0\"\n</code></pre> Compose UIViews <pre><code>- DropdownMenu(\n+ CascadeDropdownMenu(\n expanded = expanded,\n  onDismissRequest = { expanded = false }\n) { \n DropdownMenuItem(\u2026)\n  DropdownMenuItem(\u2026)\n}\n</code></pre> <pre><code>- val popup = PopupMenu(context, anchor)\n+ val popup = CascadePopupMenu(context, anchor)\n popup.inflate(R.menu.nicolas_cage_movies)\n  popup.show()\n</code></pre> <p>See additional documentation for,</p> <ul> <li>Compose UI</li> <li>Views</li> </ul>"},{"location":"compose/","title":"cascade","text":"<p><code>cascade</code> offers a drop-in replacement for <code>DropdownMenu</code> with support for nested menus, smooth height animations and <code>0dp</code> vertical content paddings.</p> <pre><code>implementation \"me.saket.cascade:cascade-compose:2.3.0\"\nimplementation \"androidx.compose.material3:material3:\u2026\" // https://d.android.com/jetpack/androidx/releases/compose-material3\n</code></pre> <pre><code>var isMenuVisible by rememberSaveable { mutableStateOf(false) }\nCascadeDropdownMenu(\nexpanded = isMenuVisible,\nonDismissRequest = { isMenuVisible = false }\n) {\nDropdownMenuItem(\ntext = { Text(\"Horizon\") },\nchildren = {\nDropdownMenuItem(\ntext = { Text(\"Zero Dawn\") },\nonClick = { \u2026 }\n)\nDropdownMenuItem(\ntext = { Text(\"Forbidden West\") },\nonClick = { \u2026 }\n)\n}\n)\n}\n</code></pre>"},{"location":"compose/navigation/","title":"Navigation","text":"<p>For sub-menus, <code>cascade</code> will automatically navigate back when their title is clicked. For manual navigation, <code>CascadeState#navigateBack()</code> can be used.</p> <pre><code>val state = rememberCascadeState()\nCascadeDropdownMenu(\nstate = state, \u2026\n) {\nDropdownMenuItem(\ntext = { Text(\"Remove\") },\nchildrenHeader = {\n// childrenHeader is an optional parameter. If you don't provide one, cascade\n// will automatically use the text composable (\"Remove\" in this example).\nDropdownMenuHeader { Text(\"Are you sure?\") }\n},\nchildren = {\nDropdownMenuItem(\ntext = { Text(\"Burn them all\") },\nonClick = { \u2026 }\n)\nDropdownMenuItem(\ntext = { Text(\"Take me back\") },\nonClick = { state.navigateBack() }\n)\n},\n)\n}\n</code></pre>"},{"location":"compose/theming/","title":"Theming","text":"<p>Because <code>cascade</code> reuses the same components as <code>DropdownMenu</code>, you can follow the official material3 documentation for theming menus and expect the specs to work with <code>cascade</code>.</p>"},{"location":"compose/theming/#cascadedropdownmenu","title":"<code>CascadeDropdownMenu</code>","text":"Design attribute Theme token Shape <code>MaterialTheme.shapes.extraSmall</code> Background color <code>MaterialTheme.colorScheme.surface</code>"},{"location":"compose/theming/#dropdownmenuheader","title":"<code>DropdownMenuHeader</code>","text":"Design attribute Theme token Content color <code>LocalContentColor</code> with 60% opacity Text style <code>MaterialTheme.typography.labelLarge</code> with 90% font size and letter spacing"},{"location":"compose/theming/#dropdownmenuitem","title":"<code>DropdownMenuItem</code>","text":"Design attribute Theme token Icon size <code>24dp</code> minimum Colors <code>MenuItemColors</code> Text style <code>MaterialTheme.typography.labelLarge</code>"},{"location":"views/","title":"cascade","text":"<p><code>cascade</code> offers a drop-in replacement for PopupMenu. For guidance on creating &amp; nesting menus, the official documentation can be followed while replacing any usages of <code>PopupMenu</code> with <code>CascadePopupMenu</code>.</p> <pre><code>implementation \"me.saket.cascade:cascade:2.3.0\"\n</code></pre> <pre><code>- val popup = PopupMenu(context, anchor)\n+ val popup = CascadePopupMenu(context, anchor)\n popup.inflate(R.menu.nicolas_cage_movies)\n  popup.show()\n</code></pre>"},{"location":"views/#consistency-with-toolbars-overflow-menu","title":"Consistency with Toolbar's overflow menu","text":"<p><code>Toolbar</code> uses <code>PopupMenu</code> for showing overflow menu without offering any way to change this. If you're replacing all <code>PopupMenu</code> usages in your project with <code>cascade</code>, there are a few ways you could achieve consistency by forcing <code>Toolbar</code> to use <code>cascade</code>:</p> <ul> <li> <p>The safest way is to extract out your toolbar menu items with <code>app:showAsAction=\"ifRoom\"</code> into their own menu that is shown using <code>cascade</code> manually.</p> </li> <li> <p>Alternatively, <code>cascade</code> offers an override using reflection but is currently incompatible with Proguard:</p> </li> </ul> <pre><code>toolbar.overrideAllPopupMenus { context, anchor -&gt;\nCascadePopupMenu(context, anchor)\n}\n// The lambda can be collapsed into a reference\n// if you're only using the two-param constructor.\ntoolbar.overrideAllPopupMenus(with = ::CascadePopupMenu)\n</code></pre>"},{"location":"views/custom_layouts/","title":"Custom layouts","text":"<p><code>cascade</code> was originally inspired by Google Drive's that uses a variety of complex controls. For apps that want to create something similar, a batteries-included CascadePopupWindow is provided for use with custom layouts.</p> <pre><code>val customMenuView: View = \u2026\nval popup = CascadePopupWindow(context)\npopup.contentView.addView(customMenuView)  // Also see contentView.goBack().\npopup.show(anchor)\n</code></pre> <p>I really like Google Drive's popup menu that smoothly animates between sub-menus. Is there any existing library that recreates this? pic.twitter.com/bnalL56pcR</p>\u2014 Saket Narayan (@saketme) October 5, 2020"},{"location":"views/navigation/","title":"Navigation","text":"<p>For sub-menus, <code>cascade</code> will automatically navigate back when their title is clicked. For manual navigation, <code>cascade</code> provides a back navigator:</p> <pre><code>val popup = CascadePopupMenu(context, anchor)\npopup.menu.addSubMenu(\"Remove\").also {\nit.setHeaderTitle(\"Are you sure?\")\nit.add(\"Burn them all\")\nit.add(\"Take me back\").setOnMenuItemClickListener {\npopup.navigateBack()\n}\n}\n</code></pre> <p>You can also provide your own back navigator. This injection is useful if a navigator is needed before an instance of <code>cascade</code> can be created.</p> <pre><code>val backNavigator = CascadeBackNavigator()\nCascadePopupMenu(context, anchor, backNavigator)\n</code></pre>"},{"location":"views/theming/","title":"Theming","text":"<p><code>cascade</code> is great for apps that prefer applying dynamic themes at runtime, which <code>PopupMenu</code> makes it extremely hard to do so. By providing a <code>CascadePopupMenu.Styler</code> object, you can adjust colors, spacings and text styles from Kotlin (example).</p> <pre><code>CascadePopupMenu(\nstyler = CascadePopupMenu.Styler(\u2026)\n)\n</code></pre> <p>By default, <code>cascade</code> will pick up values from your theme in the same way as <code>PopupMenu</code> would.</p> <pre><code>&lt;style name=\"AppTheme\"&gt;\n&lt;item name=\"popupMenuStyle\"&gt;@style/PopupMenuStyle&lt;/item&gt;\n&lt;item name=\"colorControlNormal\"&gt;@color/menu_icon_color&lt;/item&gt;\n&lt;item name=\"android:textColorPrimary\"&gt;@color/menu_item_text_color&lt;/item&gt;\n&lt;item name=\"android:textColorSecondary\"&gt;@color/menu_title_text_color&lt;/item&gt;\n&lt;/style&gt;\n&lt;style name=\"PopupMenuStyle\" parent=\"@style/Widget.AppCompat.PopupMenu\"&gt;\n&lt;item name=\"android:popupBackground\"&gt;...&lt;/item&gt;\n&lt;item name=\"android:popupElevation\"&gt;...&lt;/item&gt;\n&lt;/style&gt;\n</code></pre>"}]}